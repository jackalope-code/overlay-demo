import { useEffect, useState } from "react";
import Overlay, { WidgetDataMap } from "./Overlay";
import { useParams, useSearchParams } from "react-router-dom";
import axios, { AxiosError } from "axios";
import { env } from "./utils";

const routeUrl = env().routeUrl;

const useAuth = () => {
  const [clientId, setClientId] = useState<string | undefined>();
  const [isAuthenticated, setAuthenticated] = useState(false);
  const [authFailed, setAuthFailed] = useState(false);
  const [authFailMessage, setAuthFailMessage] = useState("");

  // Authenticate from search params
  function authenticate(username: string, password: string) {
    // Login
    // TODO: Handle authentication failure with username/password
    (async () => {
      axios.post(`${routeUrl}/auth`, {
        username,
        password
      }).then(res => {
        setClientId(res.data.clientId);
        setAuthenticated(true);
      }).catch(error => {
        if(!error.response) {
          setAuthFailed(true);
          setAuthFailMessage("Failed to connect to the server.");
        }
      })
    })();
  }

  return {clientId, isAuthenticated, authFailed, authFailMessage, authenticate};
}

const OverlayViewPage = () => {
  // TODO: lifted state
  const [overlayDimensions, setOverlayDimensions] = useState({width: 1920, height: 1080});
  const [widgetDataMap, setWidgetDataMap] = useState<WidgetDataMap>({});
  // const [clientId, setClientId] = useState<string | undefined>();
  // const [isAuthenticated, setAuthenticated] = useState(false);
  // const [authFailed, setAuthFailed] = useState(false);
  // const [authFailMessage, setAuthFailMessage] = useState("");
  const [searchParams] = useSearchParams();
  const {clientId, isAuthenticated, authFailed, authFailMessage, authenticate} = useAuth();
  const [errorMessage, setErrorMessage] = useState("");

  useEffect(() => {
    let username = searchParams.get("username");
    let password = searchParams.get("password");
    console.log(username, password)
    if(!username || !password) {
      setErrorMessage("Please authenticate from the URL generated by the editor.")
      console.log('set error message')
      console.log('client id', clientId)
      return;
    }
    authenticate(username, password);
  }, []);
  // Authenticate from search params
  // useEffect(() => {
  //   let username = searchParams.get("username");
  //   let password = searchParams.get("password");
  //   if(!username || !password) {
  //     setAuthFailed(true);
  //     setAuthFailMessage("Please authenticate from the URL generated by the editor.")
  //     return;
  //   }
  //   // Login
  //   // TODO: Handle authentication failure with username/password
  //   (async () => {
  //     axios.post(`${routeUrl}/auth`, {
  //       username,
  //       password
  //     }).then(res => {
  //       setClientId(res.data.clientId);
  //       setAuthenticated(true);
  //     }).catch(error => {
  //       if(!error.response) {
  //         setAuthFailed(true);
  //         setAuthFailMessage("Failed to connect to the server.");
  //       }
  //     })
  //   })();
  // }, []);

  function renderAuthFailMessage() {
    return <h2 style={{color: "red"}}>Not authenticated. {errorMessage}</h2>
  }

  return (
    clientId !== undefined ?
      <Overlay
        dimensions={overlayDimensions}
        widgetDataMap={widgetDataMap}
        setWidgetDataMap={setWidgetDataMap}
        setDimensions={setOverlayDimensions}
        clientId={clientId}
        style={{overflow: "hidden"}}
      />
      :
      <>
        {renderAuthFailMessage()}
      </>
  )
  // return (
  //   clientId !== undefined ?
  //     <Overlay
  //       dimensions={overlayDimensions}
  //       widgetDataMap={widgetDataMap}
  //       setWidgetDataMap={setWidgetDataMap}
  //       setDimensions={setOverlayDimensions}
  //       clientId={clientId}
  //       setClientId={setClientId}
  //       style={{overflow: "hidden"}}
  //     />
  //     :
  //     <>
  //       {renderAuthFailMessage()}
  //     </>
  // )
}

export default OverlayViewPage;
