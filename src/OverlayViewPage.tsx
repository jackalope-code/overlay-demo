import { useEffect, useState } from "react";
import Overlay, { WidgetDataMap } from "./Overlay";
import { useParams, useSearchParams } from "react-router-dom";
import axios, { AxiosError } from "axios";
import { env } from "./utils";

const routeUrl = env().routeUrl;

const OverlayViewPage = () => {
  // TODO: lifted state
  const [overlayDimensions, setOverlayDimensions] = useState({width: 1920, height: 1080});
  const [widgetDataMap, setWidgetDataMap] = useState<WidgetDataMap>({});
  const [clientId, setClientId] = useState<string | undefined>();
  const [isAuthenticated, setAuthenticated] = useState(false);
  const [authFailed, setAuthFailed] = useState(false);
  const [authFailMessage, setAuthFailMessage] = useState("");
  const [searchParams] = useSearchParams();

  // Authenticate from search params
  useEffect(() => {
    let username = searchParams.get("username");
    let password = searchParams.get("password");
    if(!username || !password) {
      setAuthFailed(true);
      setAuthFailMessage("Please authenticate from the URL generated by the editor.")
      return;
    }
    // Login
    // TODO: Handle authentication failure with username/password
    (async () => {
      axios.post(`${routeUrl}/auth`, {
        username,
        password
      }).then(res => {
        setClientId(res.data.clientId);
        setAuthenticated(true);
      }).catch(error => {
        if(!error.response) {
          setAuthFailed(true);
          setAuthFailMessage("Failed to connect to the server.");
        }
      })
    })();
  }, []);

  function renderAuthFailMessage() {
    if(authFailed) {
      return <h2 style={{color: "red"}}>Not authenticated. {authFailMessage}</h2>
    }
  }

  return (
    clientId !== undefined ?
      <Overlay
        dimensions={overlayDimensions}
        widgetDataMap={widgetDataMap}
        setWidgetDataMap={setWidgetDataMap}
        setDimensions={setOverlayDimensions}
        clientId={clientId}
        setClientId={setClientId}
        style={{overflow: "hidden"}}
      />
      :
      <>
        {renderAuthFailMessage()}
      </>
  )
}

export default OverlayViewPage;
